@page "/manageTodo"
@using TodoClient.Data;
@using MinApi.Services;

@inject TodoDataService todoDataService

<PageTitle>Todo</PageTitle>

<h1>A Minimal REST API demo w/ Blazor client</h1>

<EditForm Model=@NewTodo>
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="TodoTitle" class="col-form-label">Title</label>        
        <InputText id="TodoTitle" @bind-Value="@NewTodo.Title"></InputText>
        <ValidationMessage For="@(() => NewTodo.Title)" />
        <button class="btn btn-primary" type="submit"
            @onclick="AddTodo">Add</button>
    </div>
</EditForm>

@if (OutStandingTodos != null)
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Complete</th>
                    <th scope="col">Title</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var todo in OutStandingTodos)
            {
                <tr>
                    <td><input type="checkbox" bind="@todo.IsCompleted" /></td>
                    <td>@todo.Title</td>
                    <td><button onclick="@(() => DeleteTodo(todo))" class="btn-close"></button> </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
@code {
    [Parameter] public TodoItem NewTodo { get; set; } = new TodoItem();
    IList<TodoItem> OutStandingTodos { get; set; } 
        
    private async void AddTodo() {
        await todoDataService.Post(NewTodo.Title);
        NewTodo = new TodoItem();
        OutStandingTodos = await todoDataService.GetAllAsync();
        StateHasChanged();
    }

    private async void DeleteTodo(TodoItem deleteMe)
    {
        await todoDataService.Delete(deleteMe);
        OutStandingTodos = await todoDataService.GetAllAsync();
        StateHasChanged();
    }
}
